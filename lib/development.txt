################################################################################
2-17-19: #######################################################################
• Foundation's elusive silent box-sizing normalize/reset:
: huh, this one took a while ..
: Foundation applies this silently in _global.scss
  : but does not disclose, does not provide API to change/unset in their
  : overrides file (say, under 1. Global).
  : Grrr ...
  : Took me several hours to find out why is my .griddle squished narrower
  : after implementing Foundation.

      html {
        box-sizing: border-box;
      }
      *, *:before, *:after {
        box-sizing: inherit;
      }

: It can be found here:

  https://www.paulirish.com/2012/box-sizing-border-box-ftw/

  with this comment:

  /* apply a natural box layout model to all elements, but allowing components
    to change */

: Interestingly, normalize.css doesn't reset this, hm ..

: While I visually prefer the original setting by browsers (Chrome, Safari):

      box-sizing: content-box;

  because my .griddle was wider (to my liking), I will stick with (and
  start applying in future projects) this reset, esp. after reading:
  https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/

################################################################################



################################################################################
2-11-19: #######################################################################
• Custom font:
: https://blog.miragestudio7.com/architecture-fonts-download-free-architect-handwriting-font/3339/
: love these, figure out where to implement some
  : thinking portolios' figcaption tags?

################################################################################



################################################################################
2-4-19: ########################################################################
• States, specifically, styling css classes for nav items states;
: spent quite a lot of time on iterations figuring it out a solution that
  : reads well in all contexts
  : is minimalistic & simple

: Could have been a faster process if I started with thinking about the
  specific states first, e.g.:
  : nave item can be:
    : black, hover                       idle, can go to
    : red (no hover)                     current page, "cannot go to it"
    : red, hover                         parent/upstream/bread-crumb, can go to

  : realizing this could have possibly lead to arriving at the number of
    required state (& styling) classes and their names faster:
    : li, li:hover                       <= black,  hover effect
    : li.current.view:hover              <= red,    no hover effect
    : li.current                         <= red,    hover effect

################################################################################



################################################################################
1-16-19: #######################################################################
• Custom font:
: https://stackoverflow.com/q/7961721/247626
: figure out how to implement Archistico (free for commercial use):
  https://www.1001fonts.com/archistico-font.html
: or even better yet Handwriting Draft (not free for commercial use):
  https://www.fontspace.com/fontscafe/handwriting-draft-free-version
